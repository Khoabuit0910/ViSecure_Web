const mongoose = require('mongoose');
require('dotenv').config();

const User = require('./models/User');

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ Connected to MongoDB'))
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

const seedUsers = async () => {
  try {
    // Check if admin already exists
    const existingAdmin = await User.findOne({ 
      $or: [{ email: 'admin@visecure.com' }, { username: 'admin' }] 
    });

    if (existingAdmin) {
      console.log('üë§ Admin user already exists');
      return;
    }

    // Create admin user
    const adminUser = new User({
      username: 'admin',
      email: 'admin@visecure.com',
      fullName: 'Administrator ViSecure',
      password: '123456', // Will be hashed by pre-save middleware
      role: 'admin',
      status: 'active',
      createdAt: new Date(),
      lastLogin: null,
      loginCount: 0,
      bio: 'System Administrator for ViSecure News Management',
      preferences: {
        language: 'vi',
        timezone: 'Asia/Ho_Chi_Minh',
        emailNotifications: true,
        theme: 'light'
      }
    });

    await adminUser.save();
    console.log('‚úÖ Admin user created successfully');
    console.log('üìß Email: admin@visecure.com');
    console.log('üîë Password: 123456');
    console.log('üëë Role: admin');

    // Create editor user
    const editorUser = new User({
      username: 'editor',
      email: 'editor@visecure.com',
      fullName: 'Bi√™n t·∫≠p vi√™n ViSecure',
      password: '123456',
      role: 'editor',
      status: 'active',
      createdAt: new Date(),
      lastLogin: null,
      loginCount: 0,
      bio: 'News Editor for ViSecure',
      preferences: {
        language: 'vi',
        timezone: 'Asia/Ho_Chi_Minh',
        emailNotifications: true,
        theme: 'light'
      }
    });

    await editorUser.save();
    console.log('‚úÖ Editor user created successfully');
    console.log('üìß Email: editor@visecure.com');
    console.log('üîë Password: 123456');
    console.log('üìù Role: editor');

    // Create author user
    const authorUser = new User({
      username: 'author',
      email: 'author@visecure.com',
      fullName: 'T√°c gi·∫£ ViSecure',
      password: '123456',
      role: 'author',
      status: 'active',
      createdAt: new Date(),
      lastLogin: null,
      loginCount: 0,
      bio: 'Content Author for ViSecure',
      preferences: {
        language: 'vi',
        timezone: 'Asia/Ho_Chi_Minh',
        emailNotifications: true,
        theme: 'light'
      }
    });

    await authorUser.save();
    console.log('‚úÖ Author user created successfully');
    console.log('üìß Email: author@visecure.com');
    console.log('üîë Password: 123456');
    console.log('‚úçÔ∏è Role: author');

  } catch (error) {
    console.error('‚ùå Error seeding users:', error);
  } finally {
    mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
  }
};

const seedNews = async () => {
  try {
    const News = require('./models/News');
    
    // Check if news already exists
    const existingNews = await News.countDocuments();
    if (existingNews > 0) {
      console.log('üì∞ News articles already exist');
      return;
    }

    // Get admin user for author reference
    const adminUser = await User.findOne({ username: 'admin' });
    if (!adminUser) {
      console.log('‚ùå Admin user not found. Please run user seeder first.');
      return;
    }

    const sampleNews = [
      {
        title: 'Ph√°t hi·ªán l·ªó h·ªïng b·∫£o m·∫≠t nghi√™m tr·ªçng trong h·ªá ƒëi·ªÅu h√†nh ph·ªï bi·∫øn',
        excerpt: 'C√°c chuy√™n gia b·∫£o m·∫≠t v·ª´a ph√°t hi·ªán m·ªôt l·ªó h·ªïng nghi√™m tr·ªçng c√≥ th·ªÉ cho ph√©p k·∫ª t·∫•n c√¥ng truy c·∫≠p tr√°i ph√©p v√†o h·ªá th·ªëng.',
        content: `
          <p>Trong m·ªôt b√°o c√°o m·ªõi ƒë∆∞·ª£c c√¥ng b·ªë, c√°c nh√† nghi√™n c·ª©u b·∫£o m·∫≠t ƒë√£ ph√°t hi·ªán ra m·ªôt l·ªó h·ªïng nghi√™m tr·ªçng trong h·ªá ƒëi·ªÅu h√†nh ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i. L·ªó h·ªïng n√†y, ƒë∆∞·ª£c ƒë√°nh m√£ CVE-2024-12345, c√≥ th·ªÉ cho ph√©p k·∫ª t·∫•n c√¥ng th·ª±c thi m√£ t·ª´ xa v√† chi·∫øm quy·ªÅn ki·ªÉm so√°t ho√†n to√†n h·ªá th·ªëng.</p>

          <h3>Chi ti·∫øt l·ªó h·ªïng</h3>
          <p>L·ªó h·ªïng ƒë∆∞·ª£c ph√°t hi·ªán trong th√†nh ph·∫ßn x·ª≠ l√Ω g√≥i tin m·∫°ng c·ªßa kernel. Khi m·ªôt g√≥i tin ƒë∆∞·ª£c t·∫°o ƒë·∫∑c bi·ªát ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h·ªá th·ªëng, n√≥ c√≥ th·ªÉ g√¢y ra tr√†n b·ªô ƒë·ªám v√† cho ph√©p th·ª±c thi m√£ ƒë·ªôc h·∫°i.</p>

          <h3>T√°c ƒë·ªông</h3>
          <ul>
            <li>Th·ª±c thi m√£ t·ª´ xa v·ªõi quy·ªÅn root</li>
            <li>Truy c·∫≠p tr√°i ph√©p v√†o d·ªØ li·ªáu nh·∫°y c·∫£m</li>
            <li>C√†i ƒë·∫∑t backdoor vƒ©nh vi·ªÖn</li>
            <li>T·∫•n c√¥ng t·ª´ ch·ªëi d·ªãch v·ª• (DoS)</li>
          </ul>

          <h3>Khuy·∫øn ngh·ªã b·∫£o m·∫≠t</h3>
          <p>Ng∆∞·ªùi d√πng ƒë∆∞·ª£c khuy·∫øn ngh·ªã th·ª±c hi·ªán ngay c√°c bi·ªán ph√°p sau:</p>
          <ol>
            <li>C·∫≠p nh·∫≠t h·ªá ƒëi·ªÅu h√†nh l√™n phi√™n b·∫£n m·ªõi nh·∫•t</li>
            <li>B·∫≠t t∆∞·ªùng l·ª≠a v√† c·∫•u h√¨nh quy t·∫Øc b·∫£o m·∫≠t</li>
            <li>Gi√°m s√°t ho·∫°t ƒë·ªông m·∫°ng b·∫•t th∆∞·ªùng</li>
            <li>Sao l∆∞u d·ªØ li·ªáu quan tr·ªçng</li>
          </ol>

          <p>C√°c nh√† cung c·∫•p ƒë√£ ph√°t h√†nh b·∫£n v√° b·∫£o m·∫≠t kh·∫©n c·∫•p v√† khuy·∫øn ngh·ªã ng∆∞·ªùi d√πng c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c.</p>
        `,
        category: 'cybersecurity',
        tags: ['l·ªó h·ªïng', 'b·∫£o m·∫≠t', 'h·ªá ƒëi·ªÅu h√†nh', 'c·∫≠p nh·∫≠t'],
        author: adminUser._id,
        status: 'published',
        publishedAt: new Date(),
        views: 1250,
        likes: 89,
        allowComments: true,
      },
      {
        title: '10 m·∫πo b·∫£o m·∫≠t c∆° b·∫£n m·ªçi ng∆∞·ªùi d√πng internet n√™n bi·∫øt',
        excerpt: 'Trong th·ªùi ƒë·∫°i s·ªë h√≥a hi·ªán nay, vi·ªác b·∫£o v·ªá th√¥ng tin c√° nh√¢n tr√™n internet l√† v√¥ c√πng quan tr·ªçng.',
        content: `
          <p>B·∫£o m·∫≠t th√¥ng tin c√° nh√¢n tr√™n internet kh√¥ng ch·ªâ l√† tr√°ch nhi·ªám c·ªßa c√°c t·ªï ch·ª©c m√† c√≤n l√† c·ªßa m·ªói ng∆∞·ªùi d√πng. D∆∞·ªõi ƒë√¢y l√† 10 m·∫πo b·∫£o m·∫≠t c∆° b·∫£n m√† b·∫•t k·ª≥ ai c≈©ng c√≥ th·ªÉ √°p d·ª•ng:</p>

          <h3>1. S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh</h3>
          <p>T·∫°o m·∫≠t kh·∫©u d√†i √≠t nh·∫•t 12 k√Ω t·ª±, k·∫øt h·ª£p ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.</p>

          <h3>2. B·∫≠t x√°c th·ª±c hai y·∫øu t·ªë (2FA)</h3>
          <p>Lu√¥n b·∫≠t 2FA cho c√°c t√†i kho·∫£n quan tr·ªçng nh∆∞ email, ng√¢n h√†ng, m·∫°ng x√£ h·ªôi.</p>

          <h3>3. C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm th∆∞·ªùng xuy√™n</h3>
          <p>ƒê·∫£m b·∫£o h·ªá ƒëi·ªÅu h√†nh, tr√¨nh duy·ªát v√† ·ª©ng d·ª•ng lu√¥n ƒë∆∞·ª£c c·∫≠p nh·∫≠t phi√™n b·∫£n m·ªõi nh·∫•t.</p>

          <h3>4. S·ª≠ d·ª•ng HTTPS</h3>
          <p>Ch·ªâ nh·∫≠p th√¥ng tin nh·∫°y c·∫£m tr√™n c√°c trang web c√≥ ch·ª©ng ch·ªâ SSL (HTTPS).</p>

          <h3>5. C·∫©n th·∫≠n v·ªõi email l·∫°</h3>
          <p>Kh√¥ng nh·∫•p v√†o li√™n k·∫øt ho·∫∑c t·∫£i file ƒë√≠nh k√®m t·ª´ email kh√¥ng r√µ ngu·ªìn g·ªëc.</p>
        `,
        category: 'tips',
        tags: ['m·∫πo b·∫£o m·∫≠t', 'an to√†n', 'internet', 'c∆° b·∫£n'],
        author: adminUser._id,
        status: 'published',
        publishedAt: new Date(Date.now() - 86400000),
        views: 2100,
        likes: 156,
        allowComments: true,
      }
    ];

    await News.insertMany(sampleNews);
    console.log('‚úÖ Sample news articles created successfully');

  } catch (error) {
    console.error('‚ùå Error seeding news:', error);
  }
};

const runSeeder = async () => {
  console.log('üå± Starting database seeding...');
  await seedUsers();
  await seedNews();
  console.log('‚úÖ Database seeding completed!');
  process.exit(0);
};

// Run seeder
runSeeder().catch(error => {
  console.error('‚ùå Seeding failed:', error);
  process.exit(1);
});